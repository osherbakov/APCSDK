using System;
using System.Text;
using System.IO;

namespace Diacom.AltiGen
{
	public class ConnectionData
	{
		public static void Save(string [] FormattedOutputTitles, string [] FormattedOutputs)
		{
			StreamStorage.Save(FormattedOutputTitles, FormattedOutputs);
		}

		public static void Save()
		{
			StreamStorage.Save();
		}
	}

	/// <summary>
	/// Implements storing and output to trace stream.
	/// </summary>
	internal sealed class StreamStorage
	{
		private class HTML
		{
			private static string NewLine = Environment.NewLine;

			/// <summary>
			/// Gets the header for HTML formatted document based on the title set by constructor.
			/// </summary>
			public static string GetHeader(string Title)
			{
				StringBuilder TheHeader = new StringBuilder();
				TheHeader.Append("<html>");
				TheHeader.Append(NewLine);
				TheHeader.Append("<head>");
				TheHeader.Append(NewLine);
				TheHeader.Append("<!-- Generated by TraceOutputListener::HTML -->");
				TheHeader.Append(NewLine);
				TheHeader.Append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=unicode\">");
				TheHeader.Append(NewLine);
				TheHeader.Append("<title>");
				TheHeader.Append(Title);
				TheHeader.Append("</title>");
				TheHeader.Append(NewLine);
				TheHeader.Append("</head>");
				TheHeader.Append(NewLine);
				TheHeader.Append("<body bgcolor=\"#000000\">");
				TheHeader.Append(NewLine);
//				TheHeader.Append("<font color=\"#808080\">");
//				TheHeader.Append(Title);
//				TheHeader.Append("</font>");
//				TheHeader.Append(NewLine);
				return TheHeader.ToString();
			}

			public static string GetPreFormattedTextPart(string PreFormattedTextHeader, string PreFormattedText)
			{
				StringBuilder PFT = new StringBuilder(String.Format("<hr><font color=\"#0000ff\" size=\"5\">{0}</font>{1}", PreFormattedTextHeader, NewLine));
				PFT.Append("<hr>"); 
				PFT.Append(NewLine);
				PFT.Append("<pre><font color=\"#c0c0c0\">");
				PFT.Append(NewLine);
				PFT.Append(PreFormattedText);
				PFT.Append(NewLine);
				PFT.Append("</font></pre><hr>");
				PFT.Append(NewLine);
				return PFT.ToString();
			}

			/// <summary>
			/// Gets the footer for HTML formatted document.
			/// </summary>
			public static string GetFooter()
			{
				StringBuilder TheFooter = new StringBuilder("<font color=\"#808080\">Created ");
				TheFooter.Append(DateTime.Now.ToString("d MMMM yyyy, HH:mm:ss"));
				TheFooter.Append(" by Diacom&reg; Ltd.<br>");
				TheFooter.Append(NewLine);
				TheFooter.Append("127434, Moscow, Russia, Dmitrovskoe Shosse, 2. Tel: +7(095) 777-9698, voip.dia.com.ru, <a href=\"http://www.dia.com.ru\">www.dia.com.ru</a></font>");
				TheFooter.Append(NewLine);
				TheFooter.Append("</body>");
				TheFooter.Append(NewLine);
				TheFooter.Append("</html>");
				TheFooter.Append(NewLine);
				return TheFooter.ToString();
			}

			public static string GHF(string Header)
			{
				return String.Format("<font color=\"#00ff00\">{0}</font>", Header);
			}

			public static string GCF(string Command)
			{
				return String.Format("<font color=\"#c00000\">{0}</font>", Command);
			}

			public static string GPF(string Properties)
			{
				return String.Format("<font color=\"#0000c0\">{0}</font>", Properties);
			}
		}

		/// <summary>
		/// The real storage for text.
		/// </summary>
		private static System.Text.StringBuilder Storage = new System.Text.StringBuilder("Started: "+DateTime.Now.ToString("yyyy/MM/dd, HH:mm:ss:fff")+Environment.NewLine);

		/// <summary>
		/// Prints <see cref="AltiLinkPlus.ALPDataBlock"/> to standard error stream of application.
		/// </summary>
		/// <param name="time">Current time the data is putting into stream.</param>
		/// <param name="aData">Data block to print.</param>
		public static void Put(DateTime time, AltiLinkPlus.ALPDataBlock aData)
		{
			if(aData == null) return;
			string str = String.Empty;
			string HTMLStr = time.ToString("[HH:mm:ss:fff]")+" ";
			// The command.
			if(aData is AltiLinkPlus.ALPCommand)
			{
				AltiLinkPlus.ALPCommand cmd = ((AltiLinkPlus.ALPCommand)(aData));
				str = "Command:"+Environment.NewLine;
				HTMLStr += HTML.GHF("Command:")+Environment.NewLine;
				str += String.Format("ID: {0} [{1}], location ID: {2}, sequence ID: {3}, number of parameters: {4}{5}", ((ALPCmdID)(cmd.CommandId)), cmd.CommandId, cmd.LocationId, cmd.SequenceId, cmd.Count, Environment.NewLine);
				HTMLStr += HTML.GPF("ID: ")+HTML.GCF(((ALPCmdID)(cmd.CommandId)).ToString())+HTML.GPF(" [")+cmd.CommandId.ToString()+HTML.GPF("], location ID: ")+cmd.LocationId.ToString()+HTML.GPF(", sequence ID: ")+cmd.SequenceId.ToString()+HTML.GPF(", number of parameters: ")+cmd.Count.ToString()+Environment.NewLine;
				for(int i = 0; i < cmd.Count; i++) str += String.Format("param#{0}: {1}{2}", i, BitConverter.ToString(cmd[i].GetBytes()), Environment.NewLine);
				for(int i = 0; i < cmd.Count; i++) HTMLStr += String.Format("{0}{1}{2} {3}{4}", HTML.GPF("param#"), i, HTML.GPF(":"), BitConverter.ToString(cmd[i].GetBytes()), Environment.NewLine);
			}
			else if(aData is AltiLinkPlus.ALPEvent)
			{
				AltiLinkPlus.ALPEvent ev = ((AltiLinkPlus.ALPEvent)(aData));
				str = "Event:"+Environment.NewLine;
				HTMLStr += HTML.GHF("Event:")+Environment.NewLine;
				str += String.Format("ID: {0} [{1}], location ID: {2}, sequence ID: {3}, number of parameters: {4}{5}", ((ALPEvID)(ev.CommandId)), ev.CommandId, ev.LocationId, ev.SequenceId, ev.Count, Environment.NewLine);
				HTMLStr += HTML.GPF("ID: ")+HTML.GCF(((ALPEvID)(ev.CommandId)).ToString())+HTML.GPF(" [")+ev.CommandId.ToString()+HTML.GPF("], location ID: ")+ev.LocationId.ToString()+HTML.GPF(", sequence ID: ")+ev.SequenceId.ToString()+HTML.GPF(", number of parameters: ")+ev.Count.ToString()+Environment.NewLine;
				for(int i = 0; i < ev.Count; i++) str += String.Format("param#{0}: {1}{2}", i, BitConverter.ToString(ev[i].GetBytes()), Environment.NewLine);
				for(int i = 0; i < ev.Count; i++) HTMLStr += String.Format("{0}{1}{2} {3}{4}", HTML.GPF("param#"), i, HTML.GPF(":"), BitConverter.ToString(ev[i].GetBytes()), Environment.NewLine);
			}
			else if(aData is AltiLinkPlus.ALPResponse)
			{
				AltiLinkPlus.ALPResponse rsp = ((AltiLinkPlus.ALPResponse)(aData));
				str = "Responce:"+Environment.NewLine;
				HTMLStr += HTML.GHF("Responce:")+Environment.NewLine;
				str += String.Format("ID: {0} [{1}], location ID: {2}, sequence ID: {3}, responce code: {4} [{5}], number of parameters: {6}{7}", ((ALPCmdID)(rsp.CommandId)), rsp.CommandId, rsp.LocationId, rsp.SequenceId, ((ALPRespID)(rsp.ResponseCode)), rsp.ResponseCode, rsp.Count, Environment.NewLine);
				HTMLStr += HTML.GPF("ID: ")+HTML.GCF(((ALPCmdID)(rsp.CommandId)).ToString())+HTML.GPF(" [")+rsp.CommandId.ToString()+HTML.GPF("], location ID: ")+rsp.LocationId.ToString()+HTML.GPF(", sequence ID: ")+rsp.SequenceId.ToString()+HTML.GPF(", responce code: ")+HTML.GCF(((ALPRespID)(rsp.ResponseCode)).ToString())+HTML.GPF(" [")+rsp.ResponseCode.ToString()+HTML.GPF("], number of parameters: ")+rsp.Count.ToString()+Environment.NewLine;
				for(int i = 0; i < rsp.Count; i++) str += String.Format("param#{0}: {1}{2}", i, BitConverter.ToString(rsp[i].GetBytes()), Environment.NewLine);
				for(int i = 0; i < rsp.Count; i++) HTMLStr += String.Format("{0}{1}{2} {3}{4}", HTML.GPF("param#"), i, HTML.GPF(":"), BitConverter.ToString(rsp[i].GetBytes()), Environment.NewLine);

				if(rsp.CommandId.Equals(1021))
				{


					// GET_LINE_INFO responce.
/*					StreamWriter sw = new StreamWriter(DateTime.Now.ToFileTime().ToString()+".html", false, Encoding.Unicode);
					sw.WriteLine("");
					sw.WriteLine("<html>{0}<head>{0}<meta http-equiv=\"Content-Type\" content=\"text/html; charset=unicode\">{0}</head>{0}<body>{0}<pre>{0}", Environment.NewLine);
					sw.WriteLine(DateTime.Now.ToString("yyyy.MM.dd, HH:mm:ss:fff"));
					for(int i = 0; i < 80; i++) sw.Write("*");
					sw.WriteLine("");
					for(int i = 0; i < rsp.Count; i++)
					{
						sw.WriteLine("param #{0}", i);
						Diacom.AltiGen.AltiLinkPlus.ALPParameter par = ((Diacom.AltiGen.AltiLinkPlus.ALPParameter)(rsp[i]));
						sw.WriteLine("ID: {0}, length: {1}, size: {2}, type: {3}", par.ParameterID, par.Length, par.ParameterSize, par.ParameterType);
						int l = par.Length;
						char [] c = new char[l];
						byte [] b = par.GetBytes();
						for(int j = 0; j < l; j++)
						{
							if(j%10 == 0) sw.Write("|");
							else sw.Write(" ");
							c[j] = Convert.ToChar(b[j]);
						}
						sw.WriteLine("");
						sw.WriteLine(c);
						sw.WriteLine("");
					}
					sw.WriteLine("</pre>{0}</body>{0}</html>{0}", Environment.NewLine);
					sw.Close();
*/				}
			}
			else
			{
				str = "Unrecognized:"+Environment.NewLine;
				HTMLStr += HTML.GHF("Unrecognized:")+Environment.NewLine;
				str += String.Format("ID: ... [{0}], location ID: {1}, sequence ID: {2}, number of parameters: {3}{4}", aData.CommandId, aData.LocationId, aData.SequenceId, aData.Count, Environment.NewLine);
				HTMLStr += HTML.GPF("ID: ... [")+aData.CommandId.ToString()+HTML.GPF("], location ID: ")+aData.LocationId.ToString()+HTML.GPF(", sequence ID: ")+aData.SequenceId.ToString()+HTML.GPF(", number of parameters: ")+aData.Count.ToString()+Environment.NewLine;
				for(int i = 0; i < aData.Count; i++) str += String.Format("param#{0}: {1}{2}", i, BitConverter.ToString(aData[i].GetBytes()), Environment.NewLine);
				for(int i = 0; i < aData.Count; i++) HTMLStr += String.Format("{0}{1}{2} {3}{4}", HTML.GPF("param#"), i, HTML.GPF(":"), BitConverter.ToString(aData[i].GetBytes()), Environment.NewLine);
			}
			// Saving string to a storage and putting it to trace output.
			TraceOut.Put(str);
			Storage.Append(HTMLStr+Environment.NewLine+"<hr>"+Environment.NewLine);
		}

		public static new string ToString()
		{
			return "Diacom - AltiGen Connection";
		}

		public static void Save(string [] FormattedOutputTitles, string [] FormattedOutputs)
		{
			string OutputFilePath = String.Format("{0}{1}{2}.{3}.html", Path.GetTempPath(), Path.DirectorySeparatorChar, ToString(), DateTime.Now.ToString("yyyy.MM.dd, HH.mm.ss"));
			StreamWriter sw = new StreamWriter(OutputFilePath, false, Encoding.Unicode);
			sw.WriteLine(HTML.GetHeader(String.Format("{0} - {1}", ToString(), DateTime.Now.ToString("d MMMM yyyy, HH:mm:ss"))));
			sw.WriteLine(HTML.GetPreFormattedTextPart(ToString(), Storage.ToString()+Environment.NewLine+"End of connection data."));
			for(int i = 0; i < FormattedOutputTitles.Length; i++) sw.WriteLine(HTML.GetPreFormattedTextPart(FormattedOutputTitles[i], FormattedOutputs[i]));
			sw.WriteLine(HTML.GetFooter());
			sw.Close();
		}

		public static void Save()
		{
			string OutputFilePath = String.Format("{0}{1}{2}.{3}.html", Path.GetTempPath(), Path.DirectorySeparatorChar, ToString(), DateTime.Now.ToString("yyyy.MM.dd, HH.mm.ss"));
			StreamWriter sw = new StreamWriter(OutputFilePath, false, Encoding.Unicode);
			sw.WriteLine(HTML.GetHeader(String.Format("{0} - {1}", ToString(), DateTime.Now.ToString("d MMMM yyyy, HH:mm:ss"))));
			sw.WriteLine(HTML.GetPreFormattedTextPart(ToString(), Storage.ToString()));
			sw.WriteLine(HTML.GetFooter());
			sw.Close();
		}
	}

	/// <summary>
	/// Implements debug output.
	/// </summary>
	internal sealed class TraceOut : Diacom.TraceOut
	{
		/// <summary>
		/// Puts given parameter to trace output, adding the time it happends.
		/// </summary>
		/// <param name="altiEvent">Event in AltiLink Plus V2 format.</param>
		public static void Put(AltiGen.AltiLinkPlus.ALPEvent altiEvent)
		{
			System.Text.StringBuilder msg = new System.Text.StringBuilder();
			msg.Append( "Unhandled event: " + ((AltiGen.ALPEvID)(altiEvent.CommandId)).ToString() + Environment.NewLine );
			msg.Append( "Sequence ID = " + altiEvent.SequenceId.ToString() + ", location ID = " + altiEvent.LocationId.ToString() + ", number of parameters = " + altiEvent.Count.ToString() );
			for(int i = 0; i < altiEvent.Count; i++)
			{
				AltiGen.AltiLinkPlus.ALPParameter _par = altiEvent[i];
				msg.Append( System.String.Format( "Param {0} -> Type = {1}, Size = {2:D3}: ", _par.ParameterID, _par.ParameterType, _par.ParameterSize ) );
				if(_par.ParameterSize != 0) msg.Append( System.String.Concat( System.BitConverter.ToString( _par.ReadBytes( _par.ParameterSize ) ) + Environment.NewLine ) );
			}
			Put( msg.ToString() );
		}

		/// <summary>
		/// Puts given parameter to trace output, adding the time it happends.
		/// </summary>
		/// <param name="altiResponse">Responce on command in AltiLink Plus V2 format.</param>
		public static void Put(AltiGen.AltiLinkPlus.ALPResponse altiResponse)
		{
			System.Text.StringBuilder msg = new System.Text.StringBuilder();
			msg.Append( "Unhandled response: " );
			if( System.Enum.IsDefined( typeof( AltiGen.ALPCmdID ), altiResponse.CommandId ) ) msg.Append( ((AltiGen.ALPCmdID)(altiResponse.CommandId)).ToString() + Environment.NewLine );
			else if( System.Enum.IsDefined( typeof( AltiGen.ALPRespID ), altiResponse.CommandId ) ) msg.Append( ((AltiGen.ALPRespID)(altiResponse.CommandId)).ToString() + Environment.NewLine );
			else msg.Append( "unrecognised" + Environment.NewLine );
			msg.Append( "Sequence ID = " + altiResponse.SequenceId.ToString() + ", location ID = " + altiResponse.LocationId.ToString() + ", response ID = " + altiResponse.CommandId.ToString() + ", number of parameters = " + altiResponse.Count.ToString() + ", response code: " + altiResponse.ResponseCode.ToString() + Environment.NewLine );
			for(int i = 0; i < altiResponse.Count; i++)
			{
				AltiGen.AltiLinkPlus.ALPParameter _par = altiResponse[i];
				msg.Append( String.Format( "Param {0} -> Type = {1}, Size = {2:D3}: ", _par.ParameterID, _par.ParameterType, _par.ParameterSize ) );
				if(_par.ParameterSize != 0) msg.Append( System.BitConverter.ToString( _par.ReadBytes( _par.ParameterSize ) ) +Environment.NewLine );
			}
			Put( msg.ToString() );
		}
	}
}
